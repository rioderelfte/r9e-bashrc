################################################################################
#                                                                              #
# Copyright (c) 2011 - 2014, Florian Sowade <f.sowade@r9e.de>                  #
#                                                                              #
# Permission to use, copy, modify, and/or distribute this software for any     #
# purpose with or without fee is hereby granted, provided that the above       #
# copyright notice and this permission notice appear in all copies.            #
#                                                                              #
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES     #
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF             #
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR      #
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES       #
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN        #
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF      #
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.               #
#                                                                              #
################################################################################

_R9E_ENABLE_COLORS='true'

# _r9e_colorize
#   [-p]       the generated string should be used in the prompt
#   [-f color] foreground color
#   [-b color] background color
#   [-s style]
#   text
#
# colors:
#   default, black, white, red, green, yellow, blue, magenta, cyan
#
# styles:
#   default, bold
#
_r9e_colorize()
{
    local style='none'
    local fg_color='default'
    local bg_color='default'
    local prompt='false'

    local OPTIND=1
    local OPTARG
    local cur_opt
    while getopts 'pf:b:s:' cur_opt; do
        case "${cur_opt}" in
            p)
                prompt='true';;
            f)
                fg_color="${OPTARG}";;
            b)
                bg_color="${OPTARG}";;
            s)
                style="${OPTARG}";;
        esac
    done

    shift $(( OPTIND - 1 ))

    local text="${*}"

    _r9e_colorize_impl "${style}" "${fg_color}" "${bg_color}" "${prompt}" "${text}"
}

# _r9e_colorize_rainbow
#   [-p]       the generated string should be used in the prompt
#   [-b color] background color
#   [-s style]
#   text
#
# colors:
#   default, black, white, red, green, yellow, blue, magenta, cyan
#
# styles:
#   default, bold
#
_r9e_colorize_rainbow()
{
    local style='none'
    local bg_color='default'
    local prompt='false'

    local OPTIND=1
    local OPTARG
    local cur_opt
    while getopts 'pb:s:' cur_opt; do
        case "${cur_opt}" in
            p)
                prompt='true';;
            b)
                bg_color="${OPTARG}";;
            s)
                style="${OPTARG}";;
        esac
    done

    shift $(( OPTIND - 1 ))

    local text="${*}"

    if ! ${_R9E_ENABLE_COLORS}; then
        # this is basically a performance optimization
        echo -ne "${text}"
        return
    fi

    # Digits are removed from the string before calculating the hash to get
    # similar colors for hostnames which only differ in some digits. So
    # hostnames like foo-server01 and foo-server02 will look much more alike.

    local hash=$(_r9e_djb_string_hash "${text//[0-9]/}")
    local hash_yet=$(_r9e_djb_initial_hash)

    local i
    for i in $(seq 0 $(( ${#text} - 1 ))); do
        local cur_char="${text:${i}:1}"
        local cur_code=$(printf '%d' "'${cur_char}")

        hash_yet=$(_r9e_djb_iterate_hash ${hash_yet} ${cur_code})

        # These numbers were basically generated by finding large primes and
        # then testing with different values until I was happy with the result.
        local color_code=$(( ( 2207 * ${hash} + ${hash_yet} ) * 1093 % 1667 ))
        color_code=$(( ${color_code} / 238 ))

        local color=''
        case "${color_code}" in
            0 | 7)
                color='red';;
            1)
                color='green';;
            2)
                color='yellow';;
            3)
                color='blue';;
            4)
                color='magenta';;
            5)
                color='cyan';;
            6)
                color='default';;
        esac

        _r9e_colorize_impl "${style}" "${color}" "${bg_color}" "${prompt}" "${cur_char}"
    done
}

# _r9e_term_title
#   [-p] the generated string should be used in the prompt
#   text
#
# Print a text which sets the given text as term title
_r9e_term_title()
{
    local prompt='false'
    if [ "${1}" = '-p' ]; then
        prompt='true'
        shift
    fi

    local text="${*}"

    local print_title='false'
    local prefix=''
    local suffix=''
    case "${TERM}" in
        xterm*|rxvt*)
            print_title='true'
            prefix='\033]0;'
            suffix='\007'
            ;;
        screen*)
            print_title='true'
            prefix='\033k'
            suffix='\033\\'
            ;;
    esac

    if ! "${print_title}"; then
        return
    fi

    if "${prompt}"; then
        if [ "${_R9E_SHELL}" = 'bash' ]; then
            prefix='\['"${prefix}"
            suffix="${suffix}"'\]'
        elif [ "${_R9E_SHELL}" = 'zsh' ]; then
            prefix='%{'"${prefix}"
            suffix="${suffix}"'%}'
        fi
    fi

    echo -n "${prefix}${text}${suffix}"
}

_r9e_colorize_impl()
{
    local style="${1}"
    local fg_color="${2}"
    local bg_color="${3}"
    local prompt="${4}"
    local text="${5}"

    if [ "${style}" = 'none' ]; then
        if "${prompt}" && ${_R9E_BASHRC_PROMPT_AUTO_BOLD:-true}; then
            style='bold'
        else
            style='default'
        fi
    fi

    # Associative arrays were introduced in bash 4, but OS X still has bash 3,
    # so we emulate them ourselves.
    local style_list_default='0'
    local style_list_bold='01'

    local color_list_black=0
    local color_list_red=1
    local color_list_green=2
    local color_list_yellow=3
    local color_list_blue=4
    local color_list_magenta=5
    local color_list_cyan=6
    local color_list_white=7

    local format='\033[%sm'
    if "${prompt}"; then
        if [ "${_R9E_SHELL}" = 'bash' ]; then
            format="\[$format\]"
        elif [ "${_R9E_SHELL}" = 'zsh' ]; then
            format="%%{$format%%}"
        fi
    fi
    if ! ${_R9E_ENABLE_COLORS}; then
        format=''
    fi

    local style_code
    eval "style_code=\"\${style_list_${style}}\""
    local fg_code=''
    local bg_code=''

    if [ "${fg_color}" != 'default' ]; then
        eval "fg_code=\"\${color_list_${fg_color}}\""
        if [ -n "${fg_code}" ]; then
            let "fg_code+=30"
            fg_code=";${fg_code}"
        fi
    fi

    if [ "${bg_color}" != 'default' ]; then
        eval "bg_code=\"\${color_list_${bg_color}}\""
        if [ -n "${bg_code}" ]; then
            let "bg_code+=40"
            bg_code=";${bg_code}"
        fi
    fi

    printf "${format}" "${style_code}${fg_code}${bg_code}"
    printf '%s' "${text}"
    printf "${format}" '0'
}
